#include <iostream>
#include <thread>
#include <mutex>
#include <vector>
#include <random>

using namespace std;

const int NUM_THREADS = 8;
const int MAX = 1000000;

// shared data array
int data[MAX];

// global sum variable
long global_sum = 0;

// initialize a mutex
std::mutex mutx;

// thread function to calculate the sum of a portion of the array
void sum(int tid)
{
    long sum = 0;

    // calculate the start and end indices for this thread
    int range = MAX / NUM_THREADS;
    int start = tid * range;
    int end = start + range;

    // calculate the sum for this thread's portion of the array
    for (int i = start; i < end; i++) {
        sum += data[i];
    }

    // enforce sequential update to the global sum variable using a mutex
    std::lock_guard<std::mutex> lock(mutx);
    global_sum += sum;
}

int main(int argc, char *argv[])
{
    // get the number of available CPU cores on this machine
    int cores = std::thread::hardware_concurrency();

    // print the number of CPU cores
    cout << " the number of cores on this machine = " << cores << endl;

    // initialize the data array with random values
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> dis(0, 19);
    for (int i = 0; i < MAX; i++) {
        data[i] = dis(gen);
    }

    // create the threads and assign them to the sum function
    std::vector<std::thread> threads;
    for (int tid = 0; tid < NUM_THREADS; tid++) {
        threads.emplace_back(sum, tid);
    }

    // wait for all threads to finish
    for (auto& t : threads) {
        t.join();
    }

    // print the final sum of the array
    cout << "the final sum =" << global_sum << endl;

    return 0;
}
