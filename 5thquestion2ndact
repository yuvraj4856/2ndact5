#include <iostream>
#include <stdlib.h>
#include <pthread.h>
#include <time.h>
#include <unistd.h>
#include <string>

using namespace std;

#define NUM_THREADS 8
#define MAX 1000000

// initialize a mutex
pthread_mutex_t mutx;

// shared data array
int data[MAX];

// global sum variable
long global_sum = 0;

// thread function to calculate the sum of a portion of the array
void *sum(void *threadid)
{
   long tid;
   long sum = 0;

   // get the thread ID
   tid = (long)threadid;

   // calculate the start and end indices for this thread
   int range = MAX/NUM_THREADS;
   int start = tid * range ;
   int end = start + range ;

   // calculate the sum for this thread's portion of the array
   for(int i = start ; i < end ; i++) {
        sum += data[i];
   }

   // enforce sequential update to the global sum variable using a mutex
   pthread_mutex_lock(&mutx);
   global_sum += sum;
   pthread_mutex_unlock(&mutx);

   // exit the thread
   pthread_exit(NULL);
}

int main(int argc, char *argv[])
{ 
    // get the number of available CPU cores on this machine
    int cores = sysconf(_SC_NPROCESSORS_ONLN);


    // initialize the mutex
    pthread_mutex_init(&mutx, NULL);

    // print the number of CPU cores
    cout<<" the number of cores on this machine = "<<cores<<endl;

   // initialize the data array with random values
   srand(time(NULL));
   for(int i = 0; i < MAX; i++) {
       data[i] = rand() % 20;
   }

   // measure the time taken by the parallel program
   clock_t start = clock();

   // create the threads and assign them to the sum function
   pthread_t threads[NUM_THREADS];
   long tid = 0;
   for(tid = 0; tid < NUM_THREADS; tid++) {
       pthread_create(&threads[tid], NULL, sum, (void *)tid);
   }

   // wait for all threads to finish
   for(tid = 0; tid < NUM_THREADS; tid++) {
       pthread_join(threads[tid], NULL);
   }

   // print the final sum of the array
   cout<<"the final sum ="<<global_sum<<endl;

   // measure the time taken by the parallel program
   clock_t end = clock();
   double elapsed_time_parallel = double(end - start) / CLOCKS_PER_SEC;

   // measure the time taken by the sequential program
   start = clock();

   // calculate the sum of the array sequentially
   long sum_seq = 0;
   for(int i = 0 ; i < MAX ; i++) {
        sum_seq += data[i];
   }

   // print the final sum of the array
   cout<<"the final sum (sequential) ="<<sum_seq<<endl;

   // measure the time taken by the sequential program
   end = clock();
   double elapsed_time_seq = double(end - start) / CLOCKS_PER_SEC;

   // print the elapsed time for both programs
   cout<<"elapsed time for parallel program = "<<elapsed_time_parallel<<" seconds"<<endl;
   cout<<"elapsed time for sequential program = "<<elapsed_time_seq<<" seconds"<<endl;

   return 0;
}
